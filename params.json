{
  "name": "vSMC",
  "tagline": "vSMC: Scalable Monte Carlo",
  "body": "# Introduction\r\n\r\nThe vSMC library provides a framework for implementing SMC algorithms. It has a\r\nmodules that perform resampling, etc., operations common to all SMC algorithms\r\nand applications. In addition, it provides bases for implementing parallelized\r\nsamplers. The SMC algorithms are highly parallelizable, but there are many\r\nframeworks for doing this. This library tries to hide the different\r\nparallelization mechanism behind a unified interface, and thus increases code\r\nreuse.\r\n\r\n# Installation\r\n\r\nThis is a header only template C++ library. To install the library just move\r\nthe contents of the `include` directory into a proper place, e.g.,\r\n`/usr/local/include` on Unix-alike systems. Alternatively, one can use\r\n[CMake][CMake] (3.0.0 or later required),\r\n~~~sh\r\ncd /path_to_vSMC_source\r\nmkdir build\r\ncd build\r\ncmake ..\r\nmake install\r\n~~~\r\nOne may need administrator permissions to perform the last installation step or\r\nalternatively one can define the [CMake][CMake] variable `CMAKE_INSTALL_PREFIX`\r\nto change the destination of installation.\r\n\r\n# Documentation\r\n\r\nThe documentation of the [master][vSMCDocMaster] and [develop][vSMCDocDevelop]\r\nbranches, as well as for individual releases can be found online. A [User\r\nguide][VSMCUserGuide] is also provided for the develop branch.\r\n\r\n# Third-party dependencies\r\n\r\nThis library requires a working BLAS/LAPACK implementation, with the standard C\r\ninterface headers (`cblas.h` and `lapacke.h`). Some of the library's\r\nfunctionalities can only be used if optional dependencies are present.\r\nNotably, [HDF5][HDF5], [TBB][TBB], [OpenMP][OpenMP] and [MKL][MKL]. One can\r\ntell the library that these optional features are available by defining\r\nconfiguration macros such as `-DVSMC_HAS_HDF5=1` during compilation.\r\n\r\n# Parallelization backends\r\n\r\nThis library support various backends for multi-thread parallelization, unified\r\nunder a uniform interface. The primary backends are [OpenMP][OpenMP] and\r\n[TBB][TBB].\r\n\r\n# Compiler support\r\n\r\nThis library makes heavy use of some template metaprogramming techniques. It\r\nrequires a C++11 standard conforming compiler.\r\n\r\nThis library has been regularly tested with recent [Clang][Clang], [GCC][GCC]\r\nand [Intel C++ Compiler][icpc] in C++11 mode.\r\n\r\nOther compilers might work but are not tested. Complete C++11 implementation is\r\nrequired.\r\n\r\n# Examples\r\n\r\nExamples are in the `example` subdirectory, to build them,\r\n~~~sh\r\nexport CXXFLAGS=c++11\r\ncd /path_to_vSMC_source\r\nmkdir build\r\ncd build\r\ncmake ..\r\nmake example\r\n~~~\r\nSome examples may only be built if some optional dependencies are present.\r\n\r\n# License\r\n\r\nThe vSMC library is distributed with a 2-clause BSD license which can be found\r\nin the `LICENSE` file distributed with the source.\r\n\r\n[CMake]: http://www.cmake.org\r\n[Clang]: http://clang.llvm.org\r\n[Doxygen]: http://www.stack.nl/~dimitri/doxygen/manual.html\r\n[GCC]: http://gcc.gnu.org\r\n[HDF5]: http://www.hdfgroup.org\r\n[MKL]: https://software.intel.com/en-us/intel-mkl\r\n[TBB]: http://threadingbuildingblocks.org\r\n[OpenCL]: http://www.khronos.org/opencl\r\n[OpenMP]: http://www.openmp.org\r\n[icpc]: http://software.intel.com/en-us/intel-compilers\r\n[vSMCDocDevelop]: http://zhouyan.github.io/vSMCDoc/develop\r\n[vSMCDocMaster]: http://zhouyan.github.io/vSMCDoc/master\r\n[vSMCUserGuide]: http://zhouyan.github.io/vSMCDoc/develop/user_guide.pdf\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}